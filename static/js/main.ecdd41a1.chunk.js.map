{"version":3,"sources":["AR.js","App.js","serviceWorker.js","index.js"],"names":["AR","useEffect","isMounted","window","THREE","THREEx","scene","Scene","camera","Camera","renderer","WebGLRenderer","antialias","alpha","ambientLight","AmbientLight","arToolkitSource","ArToolkitSource","sourceType","arToolkitContext","ArToolkitContext","cameraParametersUrl","process","detectionMode","markerRoot","Group","onResize","onResizeElement","copyElementSizeTo","domElement","arController","canvas","add","setClearColor","Color","setSize","style","position","top","left","document","body","appendChild","init","addEventListener","projectionMatrix","copy","getProjectionMatrix","ArMarkerControls","type","patternUrl","cubeGeometry","CubeGeometry","cubeMaterial","MeshNormalMaterial","transparent","opacity","side","DoubleSide","cubeMesh","Mesh","y","initialize","animate","requestAnimationFrame","ready","update","render","srcObject","getTracks","forEach","track","stop","removeChild","App","useState","isArEnabled","setArEnabled","className","onClick","prevIsArEnabled","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"kPAsGeA,MApGf,WA+FE,OA9FAC,qBAAU,WACR,IAAIC,GAAY,EADF,EAEYC,OAAlBC,EAFM,EAENA,MAAOC,EAFD,EAECA,OACTC,EAAQ,IAAIF,EAAMG,MAClBC,EAAS,IAAIJ,EAAMK,OACnBC,EAAW,IAAIN,EAAMO,cAAc,CACvCC,WAAW,EACXC,OAAO,IAEHC,EAAe,IAAIV,EAAMW,aAAa,SAAU,IAChDC,EAAkB,IAAIX,EAAOY,gBAAgB,CACjDC,WAAY,WAERC,EAAmB,IAAId,EAAOe,iBAAiB,CACnDC,oBAAoB,GAAD,OAAKC,WAAL,yBACnBC,cAAe,SAEXC,EAAa,IAAIpB,EAAMqB,MAEvBC,EAAW,WACfV,EAAgBW,kBAChBX,EAAgBY,kBAAkBlB,EAASmB,YACL,OAAlCV,EAAiBW,cACnBd,EAAgBY,kBAAkBT,EAAiBW,aAAaC,SA8DpE,OA1DmB,WACjBzB,EAAM0B,IAAIlB,GACVR,EAAM0B,IAAIxB,GACVE,EAASuB,cAAc,IAAI7B,EAAM8B,MAAM,aAAc,GACrDxB,EAASyB,QAAQ,IAAK,KACtBzB,EAASmB,WAAWO,MAAMC,SAAW,WACrC3B,EAASmB,WAAWO,MAAME,IAAM,MAChC5B,EAASmB,WAAWO,MAAMG,KAAO,MACjCC,SAASC,KAAKC,YAAYhC,EAASmB,YAEnCb,EAAgB2B,KAAKjB,GAErBvB,OAAOyC,iBAAiB,SAAUlB,GAElCP,EAAiBwB,MAAK,WACpBnC,EAAOqC,iBAAiBC,KAAK3B,EAAiB4B,0BAGhDzC,EAAM0B,IAAIR,GACa,IAAInB,EAAO2C,iBAAiB7B,EAAkBK,EAAY,CAC/EyB,KAAM,UAAWC,WAAW,GAAD,OAAK5B,WAAL,qBAD7B,IAIM6B,EAAe,IAAI/C,EAAMgD,aAAa,EAAG,EAAG,GAC5CC,EAAe,IAAIjD,EAAMkD,mBAAmB,CAChDC,aAAa,EACbC,QAAS,GACTC,KAAMrD,EAAMsD,aAGRC,EAAW,IAAIvD,EAAMwD,KAAKT,EAAcE,GAC9CM,EAAStB,SAASwB,EAAI,GAEtBrC,EAAWQ,IAAI2B,GAsBjBG,GARgB,SAAVC,IACA7D,IACF8D,sBAAsBD,IAZM,IAA1B/C,EAAgBiD,OAClB9C,EAAiB+C,OAAOlD,EAAgBa,YAK1CnB,EAASyD,OAAO7D,EAAOE,IAazBuD,GAEO,WACL7D,GAAY,EACZc,EAAgBa,WAAWuC,UAAUC,YAClCC,SAAQ,SAAAC,GAAK,OAAIA,EAAMC,UAC1BhC,SAASC,KAAKgC,YAAY/D,EAASmB,YACnCW,SAASC,KAAKgC,YAAYzD,EAAgBa,eAE3C,IAGD,+BC7EW6C,MAjBf,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACNC,EADM,KACOC,EADP,KAEb,OACE,yBAAKC,UAAU,OACb,4BACEA,UAAU,aACVC,QAAS,kBAAMF,GAAa,SAAAG,GAAe,OAAKA,OAE/CJ,EAAc,UAAY,SAJ7B,OAMCA,GACC,kBAAC,EAAD,QCHYK,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcxB,MACrByB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ecdd41a1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nfunction AR() {\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const { THREE, THREEx } = window;\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.Camera();\r\n    const renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      alpha: true\r\n    });\r\n    const ambientLight = new THREE.AmbientLight(0xcccccc, 0.5);\r\n    const arToolkitSource = new THREEx.ArToolkitSource({\r\n      sourceType: 'webcam'\r\n    });\r\n    const arToolkitContext = new THREEx.ArToolkitContext({\r\n      cameraParametersUrl: `${process.env.PUBLIC_URL}/data/camera_para.dat`,\r\n      detectionMode: 'mono'\r\n    });\r\n    const markerRoot = new THREE.Group();\r\n\r\n    const onResize = () => {\r\n      arToolkitSource.onResizeElement();\r\n      arToolkitSource.copyElementSizeTo(renderer.domElement);\r\n      if (arToolkitContext.arController !== null) {\r\n        arToolkitSource.copyElementSizeTo(arToolkitContext.arController.canvas);\r\n      }\r\n    }\r\n\r\n    const initialize = () => {\r\n      scene.add(ambientLight);\r\n      scene.add(camera);\r\n      renderer.setClearColor(new THREE.Color('lightgrey'), 0)\r\n      renderer.setSize(640, 480);\r\n      renderer.domElement.style.position = 'absolute';\r\n      renderer.domElement.style.top = '0px';\r\n      renderer.domElement.style.left = '0px';\r\n      document.body.appendChild(renderer.domElement);\r\n    \r\n      arToolkitSource.init(onResize);\r\n\r\n      window.addEventListener('resize', onResize);\r\n\r\n      arToolkitContext.init(() => {\r\n        camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\r\n      });\r\n\r\n      scene.add(markerRoot);\r\n      const markerControls = new THREEx.ArMarkerControls(arToolkitContext, markerRoot, {\r\n        type: 'pattern', patternUrl: `${process.env.PUBLIC_URL}/data/hiro.patt`,\r\n      })\r\n    \r\n      const cubeGeometry = new THREE.CubeGeometry(1, 1, 1);\r\n      const cubeMaterial = new THREE.MeshNormalMaterial({\r\n        transparent: true,\r\n        opacity: 0.5,\r\n        side: THREE.DoubleSide\r\n      });\r\n      \r\n      const cubeMesh = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n      cubeMesh.position.y = 0.5;\r\n      \r\n      markerRoot.add(cubeMesh);\r\n    }\r\n\r\n    const update = () => {\r\n      if (arToolkitSource.ready !== false) {\r\n        arToolkitContext.update(arToolkitSource.domElement);\r\n      }\r\n    };\r\n\r\n    const render = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n    \r\n    \r\n    const animate = () => {\r\n      if (isMounted) {\r\n        requestAnimationFrame(animate);\r\n        update();\r\n        render();\r\n      }\r\n    };\r\n\r\n    initialize();\r\n    animate();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n      arToolkitSource.domElement.srcObject.getTracks()\r\n        .forEach(track => track.stop());\r\n      document.body.removeChild(renderer.domElement);\r\n      document.body.removeChild(arToolkitSource.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div />\r\n  );\r\n}\r\n\r\nexport default AR;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport AR from './AR';\n\nfunction App() {\n  const [isArEnabled, setArEnabled] = useState(false);\n  return (\n    <div className='App'>\n      <button\n        className='App-button'\n        onClick={() => setArEnabled(prevIsArEnabled => !prevIsArEnabled)}\n      >\n        {isArEnabled ? 'Disable' : 'Enable'} AR\n      </button>\n      {isArEnabled &&\n        <AR />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}